%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Using icd9}

\documentclass{article}

\title{icd9: working with ICD-9 codes and comorbidities in R}
\author{Jack O. Wasey}

\begin{document}

\maketitle

<<setup, eval=TRUE, echo=FALSE>>=

#oldOpt <- options(width = 20) # prevent stupid hbox overflows.
#on.exit(options(oldOpt))

suppressMessages(library(icd9, quietly = TRUE, warn.conflicts = FALSE))

patientData <- data.frame(
  visitId = c(1000,1000,1000,1001,1001,1002),
  icd9 = c("27801", "7208", "25001", "34400", "4011", "4011"),
  poa = factor(c("Y","N","Y","N","Y","N"))
)
@

\section{ICD-9 interpretation and processing}

This package is designed to be used with a variety of input data, including multiple possible formats of ICD-9 codes, but some assumptions are made. There are many ways of misinterpreting ICD-9 codes, especially when dealing with ranges. The code in this package carefully considers a wide range of possibilities. \textbf{ICD-9 codes are not numeric}. Using numeric values for either decimal or non-decimal form will cause serious problems, hence the predominantly string-based processing here, and a robust set of unit tests.

When calcuating which patients have which comorbidities, the input data is typically structured as follows:

<<begin, eval=TRUE>>=
patientData
@

Only the visitId column is propogated to the results. If 'present-on-arrival' is needed, it must be separated out first. The implicit default, therefore, is to ignore it, and give ICD-9 code regardless of POA status.

The comorbidities can be determined as follows:
<<getcomorbidities, eval=TRUE>>=
icd9Comorbidities(icd9df = patientData)[, 1:5]
@

The following shows the same code with default options written out:
<<echo=TRUE,eval=FALSE>>=
icd9Comorbidities(icd9df = patientData, 
                  visitId = "visitId",
                  icd9Field = "icd9",
                  icd9Mapping = ahrqComorbid, 
                  validateMapping = FALSE, 
                  shortMapping = TRUE)
@

\section{validation of ICD-9 codes}
<<validation,eval=T>>=
icd9ValidDecimal("V10.2")
icd9ValidShort(c("099.17", "-1"))
@

Validation forces the package user to provide character format ICD-9 codes. If great care is taken, passing some integers could be valid, but given the high chance of mistakes, and the simplicity of dealing entirely with character input, character is enforced:
<<invalidint,eval=F>>=
icd9ValidShort(100) # throws an error
@

\section{human-readable ICD-9}
<<explain,eval=T>>=
icd9Explain("001")
icd9Explain("001.1")
icd9Explain(list(cholera = c("001", "001.0", "001.1", "001.9")))
@
Now try to explain on a non-existent (but 'valid') ICD-9 code:
<<noexplain,eval=T>>=
icd9Explain("001.5")
@
icd9Explain(list(cholera=c("001.0", "001.1", "001.9")))
@

\section{AHRQ comorbidity classification}

The AHRQ makes an annual classification of ICD-9-CM codes into comorbidities useful for research. They provide the data in the form of SAS code. This package provides just enough code to parse the SAS source code provided by the AHRQ (but probably not much other SAS code), and generate a list of ICD-9 codes for each comorbidity.

<<ahrq,eval=F>>=
ahrqComorbid <- parseAhrqSas(save = F)
@

<<ahrqcontents>>=
head(summary(ahrqComorbid))
@

Here are a couple of the shorter ICD-9 groups listed in ahrqComorbid:

<<echo=FALSE>>=
options(width = 55)
@

SAS source code has a strong whiff of the 1970s about it.
A fragment of a recent AHRQ SAS comorbidity mapping SAS FORMAT is as follows. Note the mix of character and numeric-only ranges, isolated values, all in 'short' ICD-9 code form.

\begin{verbatim}
PROC FORMAT LIB=library fmtlib;
   VALUE $RCOMFMT
      "2780 ",
      "27800",
      "27801",
      "27803",
      "64910"-"64914",
      "V8530"-"V8539",
      "V8541"-"V8545",
      "V8554",
      "79391"         = "OBESE"     /* Obesity      */
              
      "3004 ",
      "30112",
      "3090 ",
      "3091 ",
      "311  "         = "DEPRESS"
\end{verbatim}

This is parsed using:

<<echo=TRUE,eval=FALSE>>=
parseAhrqSas()
@

resulting in a named list. here is an extract.

<<example_ahrqComorbid>>=
ahrqComorbid[c("OBESE", "DEPRESS")]
@

\end{document}
