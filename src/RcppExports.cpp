// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/icd9.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// icd9ComorbidShortCpp
SEXP icd9ComorbidShortCpp(const SEXP& icd9df, const Rcpp::List& icd9Mapping, const std::string visitId, const std::string icd9Field, const int threads, const int chunkSize, const int ompChunkSize, bool aggregate);
static SEXP icd9_icd9ComorbidShortCpp_try(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type icd9Mapping(icd9MappingSEXP);
    Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type chunkSize(chunkSizeSEXP);
    Rcpp::traits::input_parameter< const int >::type ompChunkSize(ompChunkSizeSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    __result = Rcpp::wrap(icd9ComorbidShortCpp(icd9df, icd9Mapping, visitId, icd9Field, threads, chunkSize, ompChunkSize, aggregate));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ComorbidShortCpp(SEXP icd9dfSEXP, SEXP icd9MappingSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP threadsSEXP, SEXP chunkSizeSEXP, SEXP ompChunkSizeSEXP, SEXP aggregateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ComorbidShortCpp_try(icd9dfSEXP, icd9MappingSEXP, visitIdSEXP, icd9FieldSEXP, threadsSEXP, chunkSizeSEXP, ompChunkSizeSEXP, aggregateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToCode
Rcpp::CharacterVector icd9MajMinToCode(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor, bool isShort);
static SEXP icd9_icd9MajMinToCode_try(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    __result = Rcpp::wrap(icd9MajMinToCode(major, minor, isShort));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToCode(SEXP majorSEXP, SEXP minorSEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToCode_try(majorSEXP, minorSEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToShort
Rcpp::CharacterVector icd9MajMinToShort(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd9_icd9MajMinToShort_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToShort(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToShort(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToShort_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToDecimal
Rcpp::CharacterVector icd9MajMinToDecimal(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd9_icd9MajMinToDecimal_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToDecimal(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToDecimal(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToDecimal_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToShort
Rcpp::CharacterVector icd9PartsToShort(const Rcpp::List parts);
static SEXP icd9_icd9PartsToShort_try(SEXP partsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parts(partsSEXP);
    __result = Rcpp::wrap(icd9PartsToShort(parts));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9PartsToShort(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9PartsToShort_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9PartsToDecimal
Rcpp::CharacterVector icd9PartsToDecimal(const Rcpp::List parts);
static SEXP icd9_icd9PartsToDecimal_try(SEXP partsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parts(partsSEXP);
    __result = Rcpp::wrap(icd9PartsToDecimal(parts));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9PartsToDecimal(SEXP partsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9PartsToDecimal_try(partsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts
Rcpp::List icd9MajMinToParts(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd9_icd9MajMinToParts_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToParts(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToParts(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToParts_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9MajMinToParts_list
Rcpp::List icd9MajMinToParts_list(const Rcpp::CharacterVector major, const Rcpp::CharacterVector minor);
static SEXP icd9_icd9MajMinToParts_list_try(SEXP majorSEXP, SEXP minorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type major(majorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type minor(minorSEXP);
    __result = Rcpp::wrap(icd9MajMinToParts_list(major, minor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9MajMinToParts_list(SEXP majorSEXP, SEXP minorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9MajMinToParts_list_try(majorSEXP, minorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToPartsCpp
Rcpp::List icd9ShortToPartsCpp(const Rcpp::CharacterVector icd9Short, const Rcpp::String minorEmpty);
static SEXP icd9_icd9ShortToPartsCpp_try(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minorEmpty(minorEmptySEXP);
    __result = Rcpp::wrap(icd9ShortToPartsCpp(icd9Short, minorEmpty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToPartsCpp(SEXP icd9ShortSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToPartsCpp_try(icd9ShortSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToPartsCpp
Rcpp::List icd9DecimalToPartsCpp(const Rcpp::CharacterVector icd9Decimal, const Rcpp::String minorEmpty);
static SEXP icd9_icd9DecimalToPartsCpp_try(SEXP icd9DecimalSEXP, SEXP minorEmptySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type minorEmpty(minorEmptySEXP);
    __result = Rcpp::wrap(icd9DecimalToPartsCpp(icd9Decimal, minorEmpty));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9DecimalToPartsCpp(SEXP icd9DecimalSEXP, SEXP minorEmptySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9DecimalToPartsCpp_try(icd9DecimalSEXP, minorEmptySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ShortToDecimal
Rcpp::CharacterVector icd9ShortToDecimal(const Rcpp::CharacterVector icd9Short);
static SEXP icd9_icd9ShortToDecimal_try(SEXP icd9ShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    __result = Rcpp::wrap(icd9ShortToDecimal(icd9Short));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ShortToDecimal(SEXP icd9ShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ShortToDecimal_try(icd9ShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToShortOld
Rcpp::CharacterVector icd9DecimalToShortOld(const Rcpp::CharacterVector icd9Decimal);
static SEXP icd9_icd9DecimalToShortOld_try(SEXP icd9DecimalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    __result = Rcpp::wrap(icd9DecimalToShortOld(icd9Decimal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9DecimalToShortOld(SEXP icd9DecimalSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9DecimalToShortOld_try(icd9DecimalSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9DecimalToShort
Rcpp::CharacterVector icd9DecimalToShort(const Rcpp::CharacterVector icd9Decimal);
static SEXP icd9_icd9DecimalToShort_try(SEXP icd9DecimalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    __result = Rcpp::wrap(icd9DecimalToShort(icd9Decimal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9DecimalToShort(SEXP icd9DecimalSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9DecimalToShort_try(icd9DecimalSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9GetMajor
Rcpp::CharacterVector icd9GetMajor(const Rcpp::CharacterVector icd9, const bool isShort);
static SEXP icd9_icd9GetMajor_try(SEXP icd9SEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9(icd9SEXP);
    Rcpp::traits::input_parameter< const bool >::type isShort(isShortSEXP);
    __result = Rcpp::wrap(icd9GetMajor(icd9, isShort));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9GetMajor(SEXP icd9SEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9GetMajor_try(icd9SEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9GetMajorShort
Rcpp::CharacterVector icd9GetMajorShort(const Rcpp::CharacterVector icd9Short);
static SEXP icd9_icd9GetMajorShort_try(SEXP icd9ShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    __result = Rcpp::wrap(icd9GetMajorShort(icd9Short));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9GetMajorShort(SEXP icd9ShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9GetMajorShort_try(icd9ShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9IsA
std::vector<bool> icd9IsA(const std::vector<std::string>& sv, const char* x, bool invert);
static SEXP icd9_icd9IsA_try(SEXP svSEXP, SEXP xSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sv(svSEXP);
    Rcpp::traits::input_parameter< const char* >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    __result = Rcpp::wrap(icd9IsA(sv, x, invert));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9IsA(SEXP svSEXP, SEXP xSEXP, SEXP invertSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9IsA_try(svSEXP, xSEXP, invertSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9LongToWideCpp
Rcpp::CharacterVector icd9LongToWideCpp(const SEXP& icd9df, const std::string visitId, const std::string icd9Field, bool aggregate);
static SEXP icd9_icd9LongToWideCpp_try(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< const SEXP& >::type icd9df(icd9dfSEXP);
    Rcpp::traits::input_parameter< const std::string >::type visitId(visitIdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type icd9Field(icd9FieldSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    __result = Rcpp::wrap(icd9LongToWideCpp(icd9df, visitId, icd9Field, aggregate));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9LongToWideCpp(SEXP icd9dfSEXP, SEXP visitIdSEXP, SEXP icd9FieldSEXP, SEXP aggregateSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9LongToWideCpp_try(icd9dfSEXP, visitIdSEXP, icd9FieldSEXP, aggregateSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajorSingle
Rcpp::String icd9AddLeadingZeroesMajorSingle(Rcpp::String major);
static SEXP icd9_icd9AddLeadingZeroesMajorSingle_try(SEXP majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::String >::type major(majorSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajorSingle(major));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesMajorSingle(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesMajorSingle_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajorSingleStd
std::string icd9AddLeadingZeroesMajorSingleStd(std::string m);
static SEXP icd9_icd9AddLeadingZeroesMajorSingleStd_try(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type m(mSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajorSingleStd(m));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesMajorSingleStd(SEXP mSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesMajorSingleStd_try(mSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesMajor
Rcpp::CharacterVector icd9AddLeadingZeroesMajor(Rcpp::CharacterVector major);
static SEXP icd9_icd9AddLeadingZeroesMajor_try(SEXP majorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type major(majorSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesMajor(major));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesMajor(SEXP majorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesMajor_try(majorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesShort
Rcpp::CharacterVector icd9AddLeadingZeroesShort(Rcpp::CharacterVector icd9Short);
static SEXP icd9_icd9AddLeadingZeroesShort_try(SEXP icd9ShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesShort(icd9Short));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesShort(SEXP icd9ShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesShort_try(icd9ShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroesDecimal
Rcpp::CharacterVector icd9AddLeadingZeroesDecimal(Rcpp::CharacterVector icd9Decimal);
static SEXP icd9_icd9AddLeadingZeroesDecimal_try(SEXP icd9DecimalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroesDecimal(icd9Decimal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroesDecimal(SEXP icd9DecimalSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroesDecimal_try(icd9DecimalSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9AddLeadingZeroes
Rcpp::CharacterVector icd9AddLeadingZeroes(Rcpp::CharacterVector icd9, bool isShort);
static SEXP icd9_icd9AddLeadingZeroes_try(SEXP icd9SEXP, SEXP isShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9(icd9SEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    __result = Rcpp::wrap(icd9AddLeadingZeroes(icd9, isShort));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9AddLeadingZeroes(SEXP icd9SEXP, SEXP isShortSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9AddLeadingZeroes_try(icd9SEXP, isShortSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ExpandMinorShim
Rcpp::CharacterVector icd9ExpandMinorShim(std::string minor, bool isE);
static SEXP icd9_icd9ExpandMinorShim_try(SEXP minorSEXP, SEXP isESEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type minor(minorSEXP);
    Rcpp::traits::input_parameter< bool >::type isE(isESEXP);
    __result = Rcpp::wrap(icd9ExpandMinorShim(minor, isE));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ExpandMinorShim(SEXP minorSEXP, SEXP isESEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ExpandMinorShim_try(minorSEXP, isESEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenShortCpp
Rcpp::CharacterVector icd9ChildrenShortCpp(Rcpp::CharacterVector icd9Short, bool onlyReal);
static SEXP icd9_icd9ChildrenShortCpp_try(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Short(icd9ShortSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenShortCpp(icd9Short, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ChildrenShortCpp(SEXP icd9ShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ChildrenShortCpp_try(icd9ShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenDecimalCpp
Rcpp::CharacterVector icd9ChildrenDecimalCpp(Rcpp::CharacterVector icd9Decimal, bool onlyReal);
static SEXP icd9_icd9ChildrenDecimalCpp_try(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Decimal(icd9DecimalSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenDecimalCpp(icd9Decimal, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ChildrenDecimalCpp(SEXP icd9DecimalSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ChildrenDecimalCpp_try(icd9DecimalSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9ChildrenCpp
Rcpp::CharacterVector icd9ChildrenCpp(Rcpp::CharacterVector icd9, bool isShort, bool onlyReal);
static SEXP icd9_icd9ChildrenCpp_try(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9(icd9SEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyReal(onlyRealSEXP);
    __result = Rcpp::wrap(icd9ChildrenCpp(icd9, isShort, onlyReal));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9ChildrenCpp(SEXP icd9SEXP, SEXP isShortSEXP, SEXP onlyRealSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9ChildrenCpp_try(icd9SEXP, isShortSEXP, onlyRealSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9InReferenceCode
Rcpp::LogicalVector icd9InReferenceCode(Rcpp::CharacterVector icd9, Rcpp::CharacterVector icd9Reference, bool isShort, bool isShortReference);
static SEXP icd9_icd9InReferenceCode_try(SEXP icd9SEXP, SEXP icd9ReferenceSEXP, SEXP isShortSEXP, SEXP isShortReferenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9(icd9SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type icd9Reference(icd9ReferenceSEXP);
    Rcpp::traits::input_parameter< bool >::type isShort(isShortSEXP);
    Rcpp::traits::input_parameter< bool >::type isShortReference(isShortReferenceSEXP);
    __result = Rcpp::wrap(icd9InReferenceCode(icd9, icd9Reference, isShort, isShortReference));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9InReferenceCode(SEXP icd9SEXP, SEXP icd9ReferenceSEXP, SEXP isShortSEXP, SEXP isShortReferenceSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9InReferenceCode_try(icd9SEXP, icd9ReferenceSEXP, isShortSEXP, isShortReferenceSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trimLeftCpp
std::string trimLeftCpp(std::string s);
static SEXP icd9_trimLeftCpp_try(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    __result = Rcpp::wrap(trimLeftCpp(s));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_trimLeftCpp(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_trimLeftCpp_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// strimCpp
std::string strimCpp(std::string s);
static SEXP icd9_strimCpp_try(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    __result = Rcpp::wrap(strimCpp(s));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_strimCpp(SEXP sSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_strimCpp_try(sSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// trimCpp
std::vector<std::string> trimCpp(std::vector<std::string> sv);
static SEXP icd9_trimCpp_try(SEXP svSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sv(svSEXP);
    __result = Rcpp::wrap(trimCpp(sv));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_trimCpp(SEXP svSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_trimCpp_try(svSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// assertFactorOrCharacter
bool assertFactorOrCharacter(SEXP x);
static SEXP icd9_assertFactorOrCharacter_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    __result = Rcpp::wrap(assertFactorOrCharacter(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_assertFactorOrCharacter(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_assertFactorOrCharacter_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpCores
int getOmpCores();
static SEXP icd9_getOmpCores_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpCores());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_getOmpCores() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_getOmpCores_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpMaxThreads
int getOmpMaxThreads();
static SEXP icd9_getOmpMaxThreads_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpMaxThreads());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_getOmpMaxThreads() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_getOmpMaxThreads_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// getOmpThreads
int getOmpThreads();
static SEXP icd9_getOmpThreads_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(getOmpThreads());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_getOmpThreads() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_getOmpThreads_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// randomMajorCpp
Rcpp::NumericVector randomMajorCpp(int n);
static SEXP icd9_randomMajorCpp_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(randomMajorCpp(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_randomMajorCpp(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_randomMajorCpp_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortN
std::vector<std::string> icd9RandomShortN(std::vector<std::string>::size_type n);
static SEXP icd9_icd9RandomShortN_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortN(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9RandomShortN(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9RandomShortN_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortV
std::vector<std::string> icd9RandomShortV(std::vector<std::string>::size_type n);
static SEXP icd9_icd9RandomShortV_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortV(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9RandomShortV(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9RandomShortV_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShortE
std::vector<std::string> icd9RandomShortE(std::vector<std::string>::size_type n);
static SEXP icd9_icd9RandomShortE_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShortE(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9RandomShortE(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9RandomShortE_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// icd9RandomShort
std::vector<std::string> icd9RandomShort(std::vector<std::string>::size_type n);
static SEXP icd9_icd9RandomShort_try(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<std::string>::size_type >::type n(nSEXP);
    __result = Rcpp::wrap(icd9RandomShort(n));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_icd9RandomShort(SEXP nSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_icd9RandomShort_try(nSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// fastIntToStringStd
std::vector<std::string> fastIntToStringStd(std::vector<int> x);
static SEXP icd9_fastIntToStringStd_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    __result = Rcpp::wrap(fastIntToStringStd(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_fastIntToStringStd(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_fastIntToStringStd_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// fastIntToStringRcpp
Rcpp::CharacterVector fastIntToStringRcpp(Rcpp::IntegerVector x);
static SEXP icd9_fastIntToStringRcpp_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    __result = Rcpp::wrap(fastIntToStringRcpp(x));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_fastIntToStringRcpp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_fastIntToStringRcpp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// callgrindStart
int callgrindStart(bool zerostats);
static SEXP icd9_callgrindStart_try(SEXP zerostatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< bool >::type zerostats(zerostatsSEXP);
    __result = Rcpp::wrap(callgrindStart(zerostats));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_callgrindStart(SEXP zerostatsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_callgrindStart_try(zerostatsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// valgrindCallgrindStart
int valgrindCallgrindStart(bool zerostats);
static SEXP icd9_valgrindCallgrindStart_try(SEXP zerostatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< bool >::type zerostats(zerostatsSEXP);
    __result = Rcpp::wrap(valgrindCallgrindStart(zerostats));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP icd9_valgrindCallgrindStart(SEXP zerostatsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(icd9_valgrindCallgrindStart_try(zerostatsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int icd9_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*icd9ComorbidShortCpp)(const SEXP&,const Rcpp::List&,const std::string,const std::string,const int,const int,const int,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToCode)(const Rcpp::CharacterVector,const Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToShort)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9MajMinToDecimal)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9PartsToShort)(const Rcpp::List)");
        signatures.insert("Rcpp::CharacterVector(*icd9PartsToDecimal)(const Rcpp::List)");
        signatures.insert("Rcpp::List(*icd9MajMinToParts)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::List(*icd9MajMinToParts_list)(const Rcpp::CharacterVector,const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::List(*icd9ShortToPartsCpp)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::List(*icd9DecimalToPartsCpp)(const Rcpp::CharacterVector,const Rcpp::String)");
        signatures.insert("Rcpp::CharacterVector(*icd9ShortToDecimal)(const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9DecimalToShortOld)(const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9DecimalToShort)(const Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9GetMajor)(const Rcpp::CharacterVector,const bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9GetMajorShort)(const Rcpp::CharacterVector)");
        signatures.insert("std::vector<bool>(*icd9IsA)(const std::vector<std::string>&,const char*,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9LongToWideCpp)(const SEXP&,const std::string,const std::string,bool)");
        signatures.insert("Rcpp::String(*icd9AddLeadingZeroesMajorSingle)(Rcpp::String)");
        signatures.insert("std::string(*icd9AddLeadingZeroesMajorSingleStd)(std::string)");
        signatures.insert("Rcpp::CharacterVector(*icd9AddLeadingZeroesMajor)(Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9AddLeadingZeroesShort)(Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9AddLeadingZeroesDecimal)(Rcpp::CharacterVector)");
        signatures.insert("Rcpp::CharacterVector(*icd9AddLeadingZeroes)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ExpandMinorShim)(std::string,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenShortCpp)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenDecimalCpp)(Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::CharacterVector(*icd9ChildrenCpp)(Rcpp::CharacterVector,bool,bool)");
        signatures.insert("Rcpp::LogicalVector(*icd9InReferenceCode)(Rcpp::CharacterVector,Rcpp::CharacterVector,bool,bool)");
        signatures.insert("std::string(*trimLeftCpp)(std::string)");
        signatures.insert("std::string(*strimCpp)(std::string)");
        signatures.insert("std::vector<std::string>(*trimCpp)(std::vector<std::string>)");
        signatures.insert("bool(*assertFactorOrCharacter)(SEXP)");
        signatures.insert("int(*getOmpCores)()");
        signatures.insert("int(*getOmpMaxThreads)()");
        signatures.insert("int(*getOmpThreads)()");
        signatures.insert("Rcpp::NumericVector(*randomMajorCpp)(int)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortN)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortV)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShortE)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*icd9RandomShort)(std::vector<std::string>::size_type)");
        signatures.insert("std::vector<std::string>(*fastIntToStringStd)(std::vector<int>)");
        signatures.insert("Rcpp::CharacterVector(*fastIntToStringRcpp)(Rcpp::IntegerVector)");
        signatures.insert("int(*callgrindStart)(bool)");
        signatures.insert("int(*valgrindCallgrindStart)(bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP icd9_RcppExport_registerCCallable() { 
    R_RegisterCCallable("icd9", "icd9_icd9ComorbidShortCpp", (DL_FUNC)icd9_icd9ComorbidShortCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToCode", (DL_FUNC)icd9_icd9MajMinToCode_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToShort", (DL_FUNC)icd9_icd9MajMinToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToDecimal", (DL_FUNC)icd9_icd9MajMinToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9PartsToShort", (DL_FUNC)icd9_icd9PartsToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9PartsToDecimal", (DL_FUNC)icd9_icd9PartsToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToParts", (DL_FUNC)icd9_icd9MajMinToParts_try);
    R_RegisterCCallable("icd9", "icd9_icd9MajMinToParts_list", (DL_FUNC)icd9_icd9MajMinToParts_list_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToPartsCpp", (DL_FUNC)icd9_icd9ShortToPartsCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9DecimalToPartsCpp", (DL_FUNC)icd9_icd9DecimalToPartsCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9ShortToDecimal", (DL_FUNC)icd9_icd9ShortToDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9DecimalToShortOld", (DL_FUNC)icd9_icd9DecimalToShortOld_try);
    R_RegisterCCallable("icd9", "icd9_icd9DecimalToShort", (DL_FUNC)icd9_icd9DecimalToShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9GetMajor", (DL_FUNC)icd9_icd9GetMajor_try);
    R_RegisterCCallable("icd9", "icd9_icd9GetMajorShort", (DL_FUNC)icd9_icd9GetMajorShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9IsA", (DL_FUNC)icd9_icd9IsA_try);
    R_RegisterCCallable("icd9", "icd9_icd9LongToWideCpp", (DL_FUNC)icd9_icd9LongToWideCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesMajorSingle", (DL_FUNC)icd9_icd9AddLeadingZeroesMajorSingle_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesMajorSingleStd", (DL_FUNC)icd9_icd9AddLeadingZeroesMajorSingleStd_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesMajor", (DL_FUNC)icd9_icd9AddLeadingZeroesMajor_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesShort", (DL_FUNC)icd9_icd9AddLeadingZeroesShort_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroesDecimal", (DL_FUNC)icd9_icd9AddLeadingZeroesDecimal_try);
    R_RegisterCCallable("icd9", "icd9_icd9AddLeadingZeroes", (DL_FUNC)icd9_icd9AddLeadingZeroes_try);
    R_RegisterCCallable("icd9", "icd9_icd9ExpandMinorShim", (DL_FUNC)icd9_icd9ExpandMinorShim_try);
    R_RegisterCCallable("icd9", "icd9_icd9ChildrenShortCpp", (DL_FUNC)icd9_icd9ChildrenShortCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9ChildrenDecimalCpp", (DL_FUNC)icd9_icd9ChildrenDecimalCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9ChildrenCpp", (DL_FUNC)icd9_icd9ChildrenCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9InReferenceCode", (DL_FUNC)icd9_icd9InReferenceCode_try);
    R_RegisterCCallable("icd9", "icd9_trimLeftCpp", (DL_FUNC)icd9_trimLeftCpp_try);
    R_RegisterCCallable("icd9", "icd9_strimCpp", (DL_FUNC)icd9_strimCpp_try);
    R_RegisterCCallable("icd9", "icd9_trimCpp", (DL_FUNC)icd9_trimCpp_try);
    R_RegisterCCallable("icd9", "icd9_assertFactorOrCharacter", (DL_FUNC)icd9_assertFactorOrCharacter_try);
    R_RegisterCCallable("icd9", "icd9_getOmpCores", (DL_FUNC)icd9_getOmpCores_try);
    R_RegisterCCallable("icd9", "icd9_getOmpMaxThreads", (DL_FUNC)icd9_getOmpMaxThreads_try);
    R_RegisterCCallable("icd9", "icd9_getOmpThreads", (DL_FUNC)icd9_getOmpThreads_try);
    R_RegisterCCallable("icd9", "icd9_randomMajorCpp", (DL_FUNC)icd9_randomMajorCpp_try);
    R_RegisterCCallable("icd9", "icd9_icd9RandomShortN", (DL_FUNC)icd9_icd9RandomShortN_try);
    R_RegisterCCallable("icd9", "icd9_icd9RandomShortV", (DL_FUNC)icd9_icd9RandomShortV_try);
    R_RegisterCCallable("icd9", "icd9_icd9RandomShortE", (DL_FUNC)icd9_icd9RandomShortE_try);
    R_RegisterCCallable("icd9", "icd9_icd9RandomShort", (DL_FUNC)icd9_icd9RandomShort_try);
    R_RegisterCCallable("icd9", "icd9_fastIntToStringStd", (DL_FUNC)icd9_fastIntToStringStd_try);
    R_RegisterCCallable("icd9", "icd9_fastIntToStringRcpp", (DL_FUNC)icd9_fastIntToStringRcpp_try);
    R_RegisterCCallable("icd9", "icd9_callgrindStart", (DL_FUNC)icd9_callgrindStart_try);
    R_RegisterCCallable("icd9", "icd9_valgrindCallgrindStart", (DL_FUNC)icd9_valgrindCallgrindStart_try);
    R_RegisterCCallable("icd9", "icd9_RcppExport_validate", (DL_FUNC)icd9_RcppExport_validate);
    return R_NilValue;
}
